---
title: "Visualization in ggplot2"
author: Eric Chan
date: January 25, 2023
theme: lumen
format: html
editor: source
toc: true
toc-expand: true
toc-depth: 3
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)  # This suppresses warnings in the HTML output
knitr::opts_knit$set(root.dir = 'C:/Users/echan1/EC Babson Research Dropbox/Eric Chan/COURSE R intro/data')
```

# Introduction

**Background on Data** The US Government’s bank regulators always worry about banks discriminating against certain races when determining who to approve for mortgage loans. For many families, mortgage loans provide access to proper housing and shelter, along with a good long-term investment, yet for many low-income families, obtaining a mortgage and owning a home is out of reach or difficult even in the absence of intentional or unintentional discrimination. Discrimination adds another layer to the issue.

Each year, bank regulators publish data resulting from the Home Mortgage Disclosure Act (HMDA), which is a record of EVERY mortgage loan application for banks of a minimum size. The data is at the application-level (each row is a mortgage application) and details the race of the applicant, the loan size requested, the applicant’s income, their neighborhood demographics, whether the loan was approved, and the reason for denial if the mortgage application was denied for a loan.

A subset of raw data is provided in hmda_bigbanks.csv. Here is the [data dictionary](https://files.consumerfinance.gov/hmda-historic-data-dictionaries/lar_record_codes.pdf) online.

**Background on Task** You work for one of the largest retail bank in the US as a data analyst in the compliance department. Recently, the company has been in trouble with its regulator, the Office of the Comptroller of the Currency (OCC), for failing to equitably provide residential mortgage loans to people of different backgrounds. The OCC have concerns that some mortgage underwriting practices from your bank may lead to mortgages approvals for qualified white applicants at substantially higher rates than for qualified black/African American applicants. They are particularly concerned about the state of Massachusetts, so you focus your analysis on this state.

You have been charged with collecting data to see if this is true. In particular, your managers want to easily and quickly visualize how your bank compares to peers in the industry when it comes to the following aspects:

-   What do our applicants look like? In other words, what are the distribution of the characteristics of applicants we give relative to peer banks and how does this differ?
-   To whom do we deny mortgage loans to? 
-   What do our loans look like? In other words, what are the distribution of the characteristics of residential loans we give relative to peer banks and how does this differ?
-  One reason why we might stand out is that we offer more high amount loans. See if this is true relative to our competition.

You proceed to do the following: \* You obtained the HMDA data in hmda_bigbanks.csv. All data were obtained here. \* You set up a Quarto document to make your work reproducible and easy to disseminate. \* In your R Markdown document in line 14, you set your working directory. \* And then you start your analysis…


# Data Management

We need to import our data set. Also, we'll want a binary (dummy) variable that we will use later. We change a variable (action_taken), where there are multiple levels of actions taken on an application, to create a dummy variable for a mortgage loan application being denied. Then we check on the four banks we have in the data.

```{r}
#Import Data
hmda <- read.csv('hmda_bigbanks.csv')

# Create dummy variable
hmda$app_denied <- ifelse(hmda$action_taken ==3,1,0)

#Check on our Bank Names
table(hmda$bank)
```

We know we will need the ggplot2 package, so we load it.

```{r}
#install.packages("ggplot2")
library(ggplot2)
```

# Categorical Data Viz

## Frequency Table

Let's start asking the question of who are the banks' customers? 

For much of these tasks, we will use the *modelsummary* package, which is really useful for generating tables.

Here, we use a frequency table for the *derived_race* variable.

```{r}
#install.packages("modelsummary")
library(modelsummary)

# Who applies for a loan, by race
datasummary_skim(hmda$derived_race, type = "categorical")
```

## Bar Chart

Let's create a bar chart to visualize derived_race.

```{r}
ggplot(hmda, aes(x=derived_race))

ggplot(hmda, aes(x=derived_race)) + 
  geom_bar() # labels are difficult to see; let's change them.

ggplot(hmda, aes(x=derived_race)) + 
  geom_bar() +
  scale_x_discrete(guide = guide_axis(angle = 90))
# labels are difficult to see; let's change them.

```

## Crosstabs/ Contingency Tables

For each race, let's see how many (and proportion) of applicants were denied loans.

```{r}
# crosstab of two variables, showing counts, row percentages, and row/column totals
datasummary_crosstab(derived_race ~ app_denied, data = hmda)
```



## Stacked Bar Charts

Let's create a stacked bar chart to see - for each race, how many applicants were denied loans?

We can do this first with raw numbers, then proportions.

```{r}
# make syre app_denied is a factor; required when ggplot is looking for a categorical variable at times.
hmda$app_denied <- as.factor(hmda$app_denied)

# Stacked Bar Chart with total row counts
ggplot(hmda, aes(x = derived_race, fill = app_denied)) +
  scale_x_discrete(guide = guide_axis(angle = 90)) +
  geom_bar()

# Stacked Bar Chart with percentages
ggplot(hmda, aes(x = derived_race, fill = app_denied)) +
  scale_x_discrete(guide = guide_axis(angle = 90)) +
  geom_bar(position="fill")
```




# Numerical Data Viz

Next, let's take a look at some numbers behind the distribution of loan_amount.

## Showing Distributions

### Boxplots

```{r}
# Boxplot
ggplot(hmda, aes(x=loan_amount)) + 
  geom_boxplot() # Notice it is difficult to view, since there are some large loans.

# subset for loans < 1 million dollars and property value < 2 million dollars
# Not that we can formally get rid of outliers, though we don't do that here.
hmda_subset <- subset(hmda,loan_amount<=1000000 & property_value<2000000)

ggplot(hmda_subset, aes(x=loan_amount)) + 
  geom_boxplot() # Notice it is difficult to view, since there are some large loans.

# Boxplots by bank with different colors
ggplot(hmda_subset, aes(x=loan_amount, y = bank, color=bank)) + 
  geom_boxplot() # Notice that in aes, 'color' requires a categorical variable

# Flip around the x and y
ggplot(hmda_subset, aes(x = bank, y=loan_amount, color=bank)) + 
  geom_boxplot() # Notice that in aes, 'color' requires a categorical variable

# We can also do this by race instead of by bank!
ggplot(hmda_subset, aes(x = bank, y=loan_amount, color=derived_race)) + 
  geom_boxplot() # Notice that in aes, 'color' requires a categorical variable

```

### Histograms

```{r}
#histogram
ggplot(hmda_subset, aes(x=loan_amount)) + geom_histogram() 
```

### Density Plots

Often, we prefer to see the shape/density of the histogram.

```{r}
# A plain density plot in ggplot
ggplot(hmda_subset, aes(x=loan_amount)) + 
  geom_density() 

# Density plot for each bank, separately, with color
ggplot(hmda_subset, aes(x=loan_amount, fill=bank)) + 
  geom_density(alpha=0.4) # the alpha provides the transparency
```

### Density Plots as Ridge Plots

```{r}
# library
# install.packages("ggridges")
library(ggridges)

ggplot(hmda_subset, aes(x=loan_amount, y=bank, fill=bank)) + 
 geom_density_ridges() 
```



## Relationship Plots

### Scatterplots

```{r}
# Scatterplot for all subsetted data
item1 <- ggplot(hmda_subset, aes(x=property_value, y=loan_amount)) + 
 geom_point() 
item1 # show plot

# Add a trendline without standard errors
item2 <- geom_smooth(method=lm , color="red", se=FALSE)
item1+item2

# Add a theme!
item3 <- theme_bw()
item1+item2+item3
  
# Faceting with multiple banks!
item4 <- facet_wrap(~bank,  ncol=2)
item1+item2+item3+item4 # Notice that they are on the same scale!

```

