---
title: "R Review"
author: "Eric W. Chan"
date: "January 22, 2024"
format: html
editor: visual
toc: true
toc-depth: 1
---

**Notebook Information:**

-   RMarkdown File Written by: Professor Eric W. Chan
-   Last Amended: Eric W. Chan 01.25.2022

# Change Working Directory

```{r setup, include=FALSE}
knitr::opts_knit$set(root.dir = 'C:/Users/jfuentes1/Documents/myrstudio(Structural Injustice)/Datasets')
```

Prior to doing anything in a Quarto file, make sure to change the working directory in the first chunk of gray space.

# Importing and Viewing Data Frames

We first learn to import the data as an R object. Then we will view the data in the data frame and assess what types of data R has imported.

## Import from CSV

We first import from CSV (one of the better formats to import data...and you can open CSV files in Excel also.)

-   Note that you can import from many types of data files (i.e., .txt, .xlsx, .dta, etc.)
-   Below, note that "df" is a shorthand for data frame and often used as a quick was of naming data frame. However, you can name the data frame object anything you want!Best to name it something useful.
    -   For example, if you do: schools \<- read.csv("sch_quality.csv"), then you should refer to your data frame as "schools" instead of "df"

```{r, results='hide'}
df <- read.csv("sch_quality.csv")
```

## View the data frame

There are multiple ways to view the data in your data frame.

-   One uses the View() function, where you can view all your data in a separate window.
-   Another uses the head() function, where you can view the first several rows of your data frame.

```{r}

# view the data -- notice the capital V!
## This will open in a separate window
View(df)
```

```{r}
# View only at the first few rows of data
head(df)
```

## Look at structure of the data frame

Now let's examine the data types (i.e., numeric, character, factor, integer etc.)

-   Here, you will notice that each column (or variable) contain a variable type along with some example of the data.
-   For example, the variable *free_reduced_lunch* is a numeric (*num*) variable, whereas *type* is a character (*chr*) variable.

```{r}
str(df)
```

If you only want the structure of one particular variable, you can specify the column:

```{r}
str(df$zip)
```

# Typecasting

For binary variables, sometimes you might want to set them up to be "logical" variables. For reasons of visualizing or running models, you may sometimes make modifications to data points; perhaps you want a character variable to become numeric, etc. There are many reasons why you might want to change variable types.

## The table() function for single variable

One example here is the *elem* variable/column, which shows data for whether a school includes elementary grades (1) or not (0).The table function shows a frequency table, where we can see the 1's and 0's. This can help us know whether we can make it a "logical" (TRUE, FALSE) variable type. If we choose do do so, anything not 0 is changed to a TRUE, and any 0's become FALSE.

First, let's look at the frequency table:

```{r}
table(df$elem)
```

## The as.logical() function

Then, if we want to typecast as a logical variable, the "as.logical"" function typecasts your X (which is df\$elem here) as a logical (TRUE or FALSE)

```{r}
df$elem <- as.logical(df$elem)
```

## The as.factor() function

We can also convert categorical variables to factors rather than a numeric or char. For example, the "rating" variable/feature is a number from 1 to 10 (see frequency table), but you can treat it as an ordinal categorical variable instead of a discrete numeric variable.

```{r}
table(df$rating)
```

```{r}
df$rating <- as.factor(df$rating)
```

## Check data type

We can now double check on whether each are logical or factor or niether using the is.logical() and is.factor() functions! They return either TRUE or FALSE.

```{r}
is.logical(df$elem)
is.logical(df$rating)
is.factor(df$rating)
```

# Slicing and Viewing Data Points

## By Row and Column

There are many ways to view the specific data points.

-   We often want to deal with data in terms of rows (usually cases/observations) and columns (usually variables).
-   Here, we find the row 2, column 3 of the data frame df gives us "Albertville High School"

```{r}
## look for specific data points using rows and columns
df[2,3] # data for row 2, column 3 of the data frame df -- verify in View
```

-   Here, we find the row 1, column 8 of the data frame df gives us the number 0

```{r}
## look for specific data points using rows and columns
df[1,8] # data for row 1, column 8 of the data frame df -- verify in View
```

## View entire row(s)

We can view entire row(s).

-   First we look for the entirety of row 1 of data frame df.

```{r}
df[1,] # row 1, and no restrictions on columns
```

-   Then, we look for columns 1 through 3 of data frame df.

```{r}
df[1:10,] # rows 1 through 10, no restrictions on columns
```

## View entire column(s)

We can view entire column(s).

-   First we look for the entirety of column 1 of data frame df.

Note: Results hidden due to space constraints.

```{r, results='hide'}
df[,1] # column 1, and no restrictions on rows
```

-   Then, we look for columns 1 through 3 of data frame df.

Note: Results hidden on HTML file due to space restrictions. To do this, we include the option "{results='hide'}" in the first line of the gray space.

```{r, results='hide'}
df[,1:3] # column 1 through 3, and no restrictions on rows
```

-   We can also view entire column(s) by using their column name(s)

Note: Results hidden on HTML file due to space restrictions. To do this, we include the option "{results='hide'}" in the first line of the gray space.

```{r, results='hide'}
df$rating # column named rating -- don't have to know it column number!
```

-   We can also view entire set of columns by using multiple column names!

Note: Results hidden on HTML file due to space restrictions. To do this, we include the option "{results='hide'}" in the first line of the gray space.

```{r}

```

```{r, results='hide'}
df[,c("schoolname","rating", "free_reduced_lunch" , "black")] # we can also select noncontiguous columns by name
```

# Keep only certain columns or rows

We can keep only certain columns and assign it to be a new data frame object.

## Keep some columns

We can keep only certain columns and assign it to be a new data frame object called "df_columns" (below) \* Notice that the data frame "df_columns" contains only 4 variables/features, which is a subset of df! \* Also note in your Global Environment (Top right) that you now have 2 data frames, df and df_columns.

Note: Results hidden on HTML file due to space restrictions. To do this, we include the option "{results='hide'}" in the first line of the gray space.

```{r}
## keep only certain columns by creating a new "data frame"
df_columns <- df[,c("schoolname","rating", "free_reduced_lunch" , "black")]
View(df_columns)
```

## Keep some rows

-   Alternatively, we can keep only certain rows and assign it to be a new data frame object called "df_rows" (below)
-   Notice that the data frame "df_rows" contains only 3 observations/cases, which is a subset of df!
-   Also note in your Global Environment (Top right) that you now have 3 data frames, df and df_columns abd df_rows.

Note: Results hidden due to space constraints.

```{r}
## keep only certain rows by creating a new "data frame"
df_rows <- df[1:3,]
View(df_rows)

```

# Basic Plots

Now, let's plot some of the data. Prior to using any R package, we must install and load it prior to using its available functions.

```{r, eval=FALSE}
## Install ggplot2, which is very popular package for visualizations
#install.packages("ggplot2")
```

-   Then load:

```{r}
## Load the package for ggplot2
library(ggplot2)
```

Let's plot two plots with simple data.

-   First, we can plot two continuous variables the percentage of students with free or reduced priced lunch against the percentage of students who identify as hispanic as a basic scatter plot:

```{r}
ggplot() +
  geom_point(data=df,aes(x=free_reduced_lunch, y=hispanic))

```

-   Second, we use a factor (categorical) variable, school rating from 1-10 (with 10 being the highest), to plot the boxplots of percentage of students with free or reduced priced lunch at each school by each school rating:

```{r}
ggplot() +
  geom_boxplot(data=df,aes(x=free_reduced_lunch, y=rating))
```

# Storing variables as objects

Alternatively, we can also store the column/variable as a named object (in this case, x). Then we can just refer to x:

```{r}
x <- df$elem
table(x)
```

# Basic Descriptive Statistics

One (out of many) ways to examine descriptive (summary) statistics is to use the modelsummary package. Let's make sure to install this package and run the datasummary_skim() function from it.

```{r}
#install.packages("modelsummary")
library(modelsummary)

datasummary_skim(df)
```

# Practice

## Practice Questions for Data Management Tasks

Start a new .R file and do the following. At the top of your .R file, clear your global environment (the memory of your data frames and other objects) by using the function rm(list=ls()). Then do the following:

1.  Set your working directory.
2.  Import the sch_quality.csv data set. Name this data frame as "schools" rather than "df."
3.  View the data using the View() and head() functions.
4.  What is the data type of *fipscounty*? Use the proper function in R.
5.  What is the data type of *multiracial*? Use the proper function in R.
6.  What is the data type of *enrollment*? Use the proper function in R.
7.  What is the data type of *city*? Use the proper function in R.
8.  What is the data point located in row 5603, column 10?
9.  What is the data point located in row 26507, column 4?
10. Use the proper R function to view only rows 3000 through 3004.
11. Keep only data for the columns *white*, *black*, *asian*, and *state*. Create a new data frame for this set of columns called "racebystate."
12. Plot the relationship between the *white* and *asian* variables. Then do the same for *white* and *black*. Does it make practical sense to you why there are no points in half of the graph? Why or why not?
13. Using "racebystate," typecast *state* as a factor variable.
14. Using the data frame "racebystate," create a single plot with boxplots showing the distribution of *asian* for every state's schools. Although it may be difficult to read (it's clunky, I know), which state seems like an outlier when it comes to the percentage of Asians at their schools? If you do not know the state abbreviations in the US, just google them.
15. Using the "racebystate"" data frame, how many schools are in the data frame for each state? Use a single R function.

## Slightly Harder Questions

16. Using only code (and not the actual values), add up the data point in located in row 6784, column 10 and the data point located in row 3472, column 12. Note that there are multiple ways of doing this!
17. Take the last question (question 16) and add to it the data point located in row 602, column 3 from the "racebystate" data frame. Use only code and not the actual values. Note that there are multiple ways of doing this!
18. Create a new variable in "racebystate" data frame that is the ratio of white to black/AfricanAmerican students. Name this ratio variable "ratio."

## Practice Answers

Start a new .R file and do the following. At the top of your .R file, clear your global environment (the memory of your data frames and other objects) by using the function rm(list=ls()). Then do the following:

1.  Set your working directory.

```{r}
#This answer should be specific to yours, but should look something like:
#setwd("C:/Users/ericw/EC Babson Research Dropbox/Eric Chan/COURSE 2000 sp22/markdown/2_data management/")
```

2.  Import the sch_quality.csv data set. Name this data frame as "schools" rather than "df."

```{r}
schools <- read.csv("sch_quality.csv")
```

3.  View the data using the View() and head() functions.

```{r}
View(schools)
head(schools)
```

4.  What is the data type of *fipscounty*? Use the proper function in R.

```{r}
str(schools$fipscounty)
```

5.  What is the data type of *multiracial*? Use the proper function in R.

```{r}
str(schools$multiracial)
```

6.  What is the data type of *enrollment*? Use the proper function in R.

```{r}
str(schools$enrollment)
```

7.  What is the data type of *city*? Use the proper function in R.

```{r}
str(schools$city)
```

8.  What is the data point located in row 5603, column 10?

```{r}
schools[5603,10]
```

9.  What is the data point located in row 26507, column 4?

```{r}
schools[26507,4]
```

10. Use the proper R function to view only rows 3000 through 3004.

```{r}
schools[3000:3004,]
```

11. Keep only data for the columns *white*, *black*, *asian*, and *state*. Create a new data frame for this set of columns called "racebystate."

```{r}
racebystate <- schools[,c("white","black", "asian", "state")]
```

12. Plot the relationship between the *white* and *asian* variables. Then do the same for *white* and *black*. Does it make practical sense to you why there are no points in half of the graph? Why or why not?

```{r}
library(ggplot2)
ggplot() +
  geom_point(data=racebystate,aes(x=white, y=asian))

ggplot() +
  geom_point(data=racebystate,aes(x=white, y=black))

```

13. Using "racebystate," typecast *state* as a factor variable.

```{r, results='hide'}
as.factor(racebystate$state)
```

14. Using the data frame "racebystate," create a single plot with boxplots showing the distribution of *asian* for every state's schools. Although it may be difficult to read (it's clunky, I know), which state seems like an outlier when it comes to the percentage of Asians at their schools? If you do not know the state abbreviations in the US, just google them.

```{r}
ggplot() +
  geom_boxplot(data=racebystate,aes(x=asian, y=state))
# Hawaii (HI) has much more Asians on average in their schools than any other state!
```

15. Using the "racebystate"" data frame, how many schools are in the data frame for each state? Use a single R function.

```{r}
table(racebystate$state)
```

16. Using only code (and not the actual values) and the "schools" data frame, add up the data point in located in row 6784, column 10 and the data point located in row 3472, column 12. Note that there are multiple ways of doing this!

```{r}
schools[6784,10] + schools[3472,12]
```

```{r}
a <- schools[6784,10] 
b <- schools[3472,12]

a+b
```

17. Take the last question (question 16) and add to it the data point located in row 602, column 3 from the "racebystate" data frame. Use only code and not the actual values. Note that there are multiple ways of doing this!

```{r}
a+b+racebystate[602,3]
```

```{r}
c <- racebystate[602,3]
a+b+c
```

18. Create a new variable in "racebystate" data frame that is the ratio of white to black/AfricanAmerican students. Call this new variable "ratio".

```{r}
racebystate$ratio <- racebystate$white/racebystate$black
View(racebystate)
```
