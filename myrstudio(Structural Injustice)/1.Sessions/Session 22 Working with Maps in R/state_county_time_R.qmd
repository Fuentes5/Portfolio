---
title: "Maps in R with State + Time Data"
author: Eric Chan
date: April 2024
format: html
self-contained: true
editor: source
theme: materia
toc: true
toc-depth: 2
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = 'C:/Users/ericw/EC Babson Research Dropbox/Eric Chan/COURSE 3605 sp24/sessions/session 22')
```


# Maps Package

The maps package provide us with pre-drawn maps data. They also have it for some countrie (i.e., Italy, France, New Zealand)

```{r}
#install.packages("maps")
#install.packages("ggmap")
#install.packages("mapproj")
#install.packages("dplyr")
library(maps)
library(ggmap)
library(mapproj)
library(dplyr)
library(ggplot2)


states <- map_data("state")   
    #the maps package allow us to get pre-drawn maps at state and county levels
names(states) #look at variable names
head(states)   #look at data

```

# Create a blank state map

We will use ggplot to plot a US map with the state borders.

```{r}


# ggplot is layer-based. It tends to start with the back
p <- ggplot(data=states, mapping=aes(x=long,y=lat, group=group)) 
  #in aes() you must always tell it the x and y, in this case we use the long and lat
  # which are the "points". Then the "mapping" tells R to draw lines between points,
  # but for the maps package, we also need to define the groups, because this will tell it
  # when to "lift the pen" to draw the next state ("group")

p  #see what we we just from ggplot()

#when using ggplot, you can add layers using "geoms."
#for example, geom_polygon will create polygons with some fill
# we can then add this to ggplot to "layer"" it on top
p + geom_polygon(fill="blue", color="gray90", size=0.1) +   # fill with dark orange, color lines gray, size of borders=0.1
  coord_map(projection="albers", lat0=39, lat1=45) # changes CRS to better one (Need mapproj package)
  # Notice that there are also other options, such as coord_map, which changes the CRS.


```

# Have some state level data
Here, we have education finance data by state. 

```{r}

edfunding <- read.csv("ed_spending_time.csv")
names(edfunding)
edfunding$state <- tolower(edfunding$state)
names(edfunding)

#Also, the best case is to have the same variable/column name to merge
# Here, in the states data, the variable is called region.
# I'll create a new variable called region that is the states
edfunding$region <-  edfunding$state

# Now we can merge the states to the oil production data

# We can use the dplyr package to do a merge
# left join allows us to keep all the data for the left dataframe (here, the oil data) and add to that dataset while not keeping anything extra beyong that that may be in the right data frame.
library(dplyr) #dplyr let's us do a left_join()
states_edfunding<- left_join(states,edfunding) 

```


# Create a map

```{r}

# Let's think about the raw total spending number in dollars only for 2012
# Subset for 2012
states_edfunding_2012 <- subset(states_edfunding, year==2012)


# Now let's start with ggplot and layer it
p <- ggplot(data=states_edfunding_2012,
            aes(x=long, y=lat, group=group, fill=tot_spending))

# Here, we layer ggplot with a bunch of stuff using different functions.
p + geom_polygon(color="gray90", size=0.1) +   # DO NOT fill now, color lines gray, size of borders=0.1
  coord_map(projection="albers", lat0=39, lat1=45) + # Projection system to use
  labs(title="Per-Pupil Spending By State, 2012") +   # title
  labs(fill="Per-Pupil Spending By State, 2012 ") + #legend label
  scale_fill_gradient(low="darkolivegreen1", high="darkolivegreen")   #gradient of fill coloring
  

```



```{r}
#install.packages("viridis")
library(viridis) # package allows you to choose color scale

# Subset for 2013-2018
states_edfunding_sub <- subset(states_edfunding, year>2012)

# Now let's start with ggplot and layer it
p0 <- ggplot(data=states_edfunding_sub,
            mapping=aes(x=long, y=lat, group=group, fill=tot_spending))

p1 <- p0 + geom_polygon(color="gray90",size=0.05) +
  coord_map(projection="albers", lat0=39, lat1=45)

p2 <- p1+scale_fill_viridis_c(option="brewer blues") # The package viridis allows you to choose a color scale
      # look at https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html for color options

p1 + facet_wrap(~year,ncol=3) + #allows you to set the time variable and the number of columns
  theme(legend.position="bottom", strip.background=element_blank()) +  #legend placement and 
  labs(fill="Ed Spending (Total US $)", title="Ed Spending, 2013-2018")


```


# Line Plot: Subset of states or locations to show gap
How can we just choose to show a subset of states or locations? And plot it to show the gaps over time across states?

```{r}
# Here, we can subset the dataset to be of only certain states
states_edfunding_NE <- subset(states_edfunding, region=="massachusetts" | region=="connecticut" | region=="rhode island" | region=="new hampshire" | region=="vermont" | region=="maine")

# We can "collapse"/"aggregate" our data to a certain level
aggr_spend_NE <-aggregate(x=states_edfunding_NE$tot_spending, by=list(states_edfunding_NE$year, states_edfunding_NE$region), FUN=mean, na.rm=TRUE)
View(aggr_spend_NE)   #Notice that the aggregate function changed our var names!
aggr_spend_NE$year <- aggr_spend_NE$Group.1 #change var name back by creating new var
aggr_spend_NE$region <- aggr_spend_NE$Group.2 #change var name back
aggr_spend_NE$tot_spending <- aggr_spend_NE$x #change var name back

# Now let's start with ggplot and layer it
p0 <- ggplot(data=aggr_spend_NE,
            mapping=aes(x=year, y=tot_spending, group=region, color=region)) + theme(legend.position = "bottom") +
  labs(title = "Per Pupil Education by state (2012-2018)", subtitle = "New England States") +
  scale_x_continuous(name = "Year", breaks = c(2012,2013,2014,2015,2016,2017,2018)) +
  scale_y_continuous(name = "Total Spending ($)", breaks=c(12000,13000,14000,15000,16000,17000,18000,19000,20000,21000))

p0

p1 <- p0 + geom_line(linejoin="round",size = 2)

p1 +theme_bw()

```



